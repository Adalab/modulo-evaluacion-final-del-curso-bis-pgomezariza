{"ast":null,"code":"var _jsxFileName = \"/Users/pgomezariza/code/github.com/Adalab/MODULO 3/modulo-3-evaluacion-final-pgomezariza/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { matchPath, useLocation } from 'react-router';\nimport getApiData from '../services/moviesApi';\nimport localStorage from '../services/localStorage';\nimport MovieSceneList from './MovieSceneList';\nimport Filters from './Filters';\nimport MovieSceneDetail from './MovieSceneDetail';\nimport '../styles/App.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //Variables de Estado\n  const [dataMovies, setDataMovies] = useState(localStorage.get('movies', []));\n  const [filterMovie, setFilterMovie] = useState('');\n  const [filterYears, setFilterYear] = useState('');\n  useEffect(() => {\n    if (dataMovies.length === 0) {\n      getApiData().then(dataClean => {\n        setDataMovies(dataClean);\n      });\n    }\n  });\n  useEffect(() => {\n    localStorage.set('movies', dataMovies);\n  }, [dataMovies]);\n\n  const handleFilterMovie = value => {\n    setFilterMovie(value);\n  };\n\n  const handleFilterYear = value => {\n    setFilterYear(value);\n  };\n\n  const movieFilters = dataMovies.filter(item => {\n    return item.title.toLowerCase().includes(filterMovie.toLowerCase());\n  }).filter(item => {\n    if (filterYears.length === 0) {\n      return true;\n    } else {\n      return filterYears.includes(item.year);\n    }\n  });\n\n  const getYear = () => {\n    const movieYears = dataMovies.map(movie => movie.year);\n    const uniqueYear = movieYears.filter((year, index) => {\n      return movieYears.indexOf(year) === index;\n    });\n    return uniqueYear;\n  };\n\n  const {\n    pathname\n  } = useLocation();\n  const dataPath = matchPath('/movie/:id', pathname);\n  const movieId = dataPath !== null ? dataPath.params.id : null;\n  const movieFound = movieFilters.find(item => item.id === parseInt(movieId));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Owen Wilson WOW\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Filters, {\n            handleFilterMovie: handleFilterMovie,\n            filterMovie: filterMovie,\n            handleFilterYear: handleFilterYear,\n            years: getYear()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MovieSceneList, {\n            movies: movieFilters\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/movie/:id\",\n        element: /*#__PURE__*/_jsxDEV(MovieSceneDetail, {\n          user: movieFound\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"yte/0Aal53mm1nXI0jET+zTwoms=\", false, function () {\n  return [useLocation];\n});\n\n_c = App;\n;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/pgomezariza/code/github.com/Adalab/MODULO 3/modulo-3-evaluacion-final-pgomezariza/src/components/App.js"],"names":["useState","useEffect","Routes","Route","matchPath","useLocation","getApiData","localStorage","MovieSceneList","Filters","MovieSceneDetail","App","dataMovies","setDataMovies","get","filterMovie","setFilterMovie","filterYears","setFilterYear","length","then","dataClean","set","handleFilterMovie","value","handleFilterYear","movieFilters","filter","item","title","toLowerCase","includes","year","getYear","movieYears","map","movie","uniqueYear","index","indexOf","pathname","dataPath","movieId","params","id","movieFound","find","parseInt"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { matchPath, useLocation } from 'react-router';\n\nimport getApiData from '../services/moviesApi';\nimport localStorage from '../services/localStorage';\n\nimport MovieSceneList from './MovieSceneList';\nimport Filters from './Filters';\nimport MovieSceneDetail from './MovieSceneDetail';\n\nimport '../styles/App.scss';\n\n\nfunction App() {\n  //Variables de Estado\n  const [dataMovies, setDataMovies] = useState(localStorage.get('movies', []));\n  const [filterMovie, setFilterMovie] = useState('');\n  const [filterYears, setFilterYear] = useState('');\n\n  useEffect(() => {\n    if (dataMovies.length === 0) {\n      getApiData().then((dataClean) => {\n        setDataMovies(dataClean);\n      });\n    }\n  }, );\n\n  useEffect(() => {\n    localStorage.set('movies', dataMovies);\n  }, [dataMovies]); \n\n  const handleFilterMovie = (value) => {\n    setFilterMovie(value);\n  };\n\n  const handleFilterYear = (value) => {\n    setFilterYear(value);\n  };\n\n  \n\n  const movieFilters = dataMovies\n    .filter((item) => {\n      return item.title.toLowerCase().includes(filterMovie.toLowerCase());\n    })\n    .filter((item) => {\n      if (filterYears.length === 0) {\n        return true;\n      } else {\n        return filterYears.includes(item.year);\n      }\n    });\n\n  const getYear = () => {\n    const movieYears = dataMovies.map((movie) => movie.year);\n    const uniqueYear = movieYears.filter((year, index) => {\n      return movieYears.indexOf(year) === index;\n    });\n    return uniqueYear;\n  };\n\n  const { pathname } = useLocation();\n  const dataPath = matchPath('/movie/:id', pathname);\n\n  const movieId = dataPath !== null ? dataPath.params.id : null;\n  const movieFound = movieFilters.find((item) => item.id === parseInt(movieId));\n\n  return (\n    <>\n      <h1 className=\"title\">Owen Wilson WOW</h1>\n      <Routes>\n        <Route\n          path=\"/\"\n          element={\n            <>\n              <Filters\n                handleFilterMovie={handleFilterMovie}\n                filterMovie={filterMovie}\n                handleFilterYear={handleFilterYear}\n                years={getYear()}\n              />\n              <MovieSceneList movies={movieFilters} />\n\n            </>\n          }\n        />\n        <Route\n          path=\"/movie/:id\"\n          element={<MovieSceneDetail user={movieFound} />}\n        />\n      </Routes>\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}